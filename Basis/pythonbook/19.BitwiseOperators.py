import PrintHelper
PrintHelper.PrintTitle('Bits And Bytes')
print('位是计算机的最小数据单元')
print('位只能表示1和0')
print('一个字符由八位组成')
print('字符的标准依旧渗透了大部分计算机')
print('即使现在很多计算机都已把更大快的字符集合作为最小的data units,数据单元')
print('ps:这里注意,最小的data units,数据单元,这一概念影响我们数据库建表的考虑')
print('值得注意的,大多数计算机支持32-bits或者64-bits的data units,数据单元.')
PrintHelper.PrintSubtitle('Binary Counting')
print('字符由八位组成,可以表现成10101010的序列,也可以表现为一个数值.')
print('从00000000到11111111,0-255,共256个数')
PrintHelper.PrintSubtitle('Character Encoding')
PrintHelper.PrintHint('ASCII码','最基础的编码机制是ASCII码','ASCII码是8位编码')
print('以下列举一下utf-8下0-31所对应的字符')
PrintHelper.PrintCode('for i in range(0,2**6-1):')
PrintHelper.PrintCode('    print(chr(i),end=\" \")')
PrintHelper.PrintCode('print()')
for i in range(0,2**6-1):
    print(chr(i),end=" ")
print()
print('以下输出1-15所对应的utf-8码')
PrintHelper.PrintCode('for x in range(0,2**4):')
PrintHelper.PrintCode('    print(str(x)+\":\",end=\" \")')
PrintHelper.PrintCode('    for y in str(x).encode(\"utf-8\"):')
PrintHelper.PrintCode('        print(str(y),end=\"\")')
PrintHelper.PrintCode('    print()')
for x in range(0,2**4):
    print(str(x)+":",end=" ")
    for y in str(x).encode("utf-8"):
        print(str(y),end="")
    print()
PrintHelper.PrintSubtitle('Number Encoding,数字编码')
print('数字被编码成位的形式有些欺骗性,在大多数情况下你并不需要因此烦扰.')
print('你需要知道的是,正整数常常被编码为多字节的形式.')
print('负数被编码的相当不同,这就是所谓的\"Two\'s Complement\"系统')
print('对于负数,所有的位都是倒置的,即1变为0,0变为1比如1是00000001,-1则是11111110')
print('对于浮点数,以及那些使用科学计数法表示的数值,这些都是多字节的典型用例')
print('讲解这些的用意是:尽可能只用正整数来操作位,这部分的处理相对其他来说更容易理解.')
PrintHelper.PrintTitle('Manipulating Bits')
print('位运算是针对数值的运算')
PrintHelper.PrintSampleWithDescription('<<','shift left,左移')
PrintHelper.PrintSampleWithDescription('>>','shift right,右移')
PrintHelper.PrintSampleWithDescription('&','bitwise and,位与')
PrintHelper.PrintSampleWithDescription('|','bitwise or,位或')
PrintHelper.PrintSampleWithDescription('-','bitwise not,位否')
PrintHelper.PrintSampleWithDescription('^','bitwise exclusive or,位异或,位差异检测')
PrintHelper.PrintSubtitle('Shifting Bits')
PrintHelper.PrintCode('code=\'A\'')
code='A'
PrintHelper.PrintCode('print(ord(code))')
print(ord(code))
PrintHelper.PrintCode('print(ord(code)<<1)')
print(ord(code)<<1)
PrintHelper.PrintCode('print(ord(code)>>1)')
print(ord(code)>>1)
PrintHelper.PrintSubtitle('Bitwise Operators')
PrintHelper.PrintSubtitle('用以更详细的解释位运算,首先定义一个方法显示输入值于字符集合的内容')
PrintHelper.PrintCode('def PrintBytes(int s):')
PrintHelper.PrintCode('    for letter in str(s):')
PrintHelper.PrintCode('        print(letter,end=\"\")')
PrintHelper.PrintCode('    print()')
def PrintBytes(s):
    print(bin(s))
PrintHelper.PrintSubtitle('prepares')
PrintHelper.PrintCode('a=11')
a=11
PrintHelper.PrintCode('b=6')
b=6
PrintHelper.PrintHint('and &')
PrintHelper.PrintCode('PrintBytes(a)')
PrintBytes(a)
PrintHelper.PrintCode('PrintBytes(b)')
PrintBytes(b)
PrintHelper.PrintCode('PrintBytes(a&b)')
PrintBytes(a&b)
PrintHelper.PrintHint('or |')
PrintHelper.PrintCode('PrintBytes(a)')
PrintBytes(a)
PrintHelper.PrintCode('PrintBytes(b)')
PrintBytes(b)
PrintHelper.PrintCode('PrintBytes(a|b)')
PrintBytes(a|b)
PrintHelper.PrintHint('not ~')
PrintHelper.PrintCode('PrintBytes(a)')
PrintBytes(a)
PrintHelper.PrintCode('PrintBytes(~a)')
PrintBytes(~a)
PrintHelper.PrintCode('PrintBytes(b)')
PrintBytes(b)
PrintHelper.PrintCode('PrintBytes(~b)')
PrintBytes(~b)
PrintHelper.PrintHint('xor ^')
PrintHelper.PrintCode('PrintBytes(a)')
PrintBytes(a)
PrintHelper.PrintCode('PrintBytes(b)')
PrintBytes(b)
PrintHelper.PrintCode('PrintBytes(a^b)')
PrintBytes(a^b)
PrintHelper.PrintTitle('Usefulness Of Bitwise Operations')
PrintHelper.PrintCode('def getRGB( color ):')
PrintHelper.PrintCode('    blue = color & 255')
PrintHelper.PrintCode('    green = (color >> 8) & 255')
PrintHelper.PrintCode('    red = (color >> 16) & 255')
PrintHelper.PrintCode('    return red, green, blue')
PrintHelper.PrintCode('r, g, b = getRGB( 223567 )')
PrintHelper.PrintCode('print( \"red={}, green={}, blue={}\".format( r, g, b ) )')
def getRGB( color ):
    blue = color & 255
    green = (color >> 8) & 255
    red = (color >> 16) & 255
    return red, green, blue
r, g, b = getRGB( 223567 )
print( "red={}, green={}, blue={}".format( r, g, b ) )
