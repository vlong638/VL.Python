import PrintHelper
PrintHelper.PrintTitle('The Command Line,命令行')
print('本章描述如何使用命令行编程')
PrintHelper.PrintSubtitle('Batch Processing,批处理')
print('批处理的详细描述:')
print('假设你写了一个让用户输入文件名和一些参数,然后对指定的文件进行操作的程序.')
print('接着,需求变更为需要对指定的文件夹下的上万个文件进行处理,你就需要改程序')
print('如果每个文件的对应的参数又是不同的,这时候就需要对应参数的计算规则')
print('但是,如果接着我要求你的程序可以对一批文件夹进行处理呢?')
print('你可以把程序改写成可以包含一批文件夹的形式')
print('但是每一次变更,我总是要求增加额外的文件夹,然后你总是需要去更改,')
print('以此反复,这会变得很烦人.')
print('这种需求可以以一种不同的形式解决,这就是批处理程序.')
print('所有命令行都支持所谓的批处理文件(可以对操作系统传递命令).')
print('在windows下这类文件以.bat结尾')
print('批处理文件可以调用你最初版本的文件处理程序')
print('这样你可以不更改原始的程序,而是可以在批处理文件中进行一些细节的调整.')
PrintHelper.PrintSubtitle('Command Line Arguments,命令参数')
print('命令行参数可以以这种形式书写')
print('python <programname>.py <argument_1> <argument_2>...<argument_n>')
print('命令行参数使用空格分隔')
print('如果你有一个空的参数,你应该用双眼号包含')
print('假如参数中有双眼号,那就只能根据命令行的shell来区别处理了')
PrintHelper.PrintHint('sys.argv,用以接收命令行参数')
print('你可以使用sys.argv来接收命令行参数')
PrintHelper.PrintTitle('Flexible Command Line Processing,灵活的命令行编程')
print('作者倾向于使用文本编辑器对Python编程')
print('但是只有很少的编辑器支持命令行参数的测试')
print('以下是一种易于测试的方案')
print('对每一个输入的参数,创建一个全局的变量')
print('示例如下')
print('import sys')
print('# 3 variables for holding the command line parameters')
print('inputfile = \"input.txt\"')
print('outputfile = \"output.txt\"')
print('shift = 3')
print('# Processing the command line parameters')
print('# (works with 0, 1, 2, or 3 parameters)')
print('if len( sys.argv ) > 1:')
print('    inputfile = sys.argv[1]')
print('if len( sys.argv ) > 2:')
print('    outputfile = sys.argv[2]')
print('if len( sys.argv ) > 3:')
print('    try:')
print('        shift = int( sys.argv[3] )')
print('    except TypeError:')
print('        print( sys.argv[3], \"is not an integer.\" )')
print('        sys.exit(1)')
PrintHelper.PrintHint('sys.exit([@ResultCode])')
print('可以返回一个指定的参数,通常用作异常编码')
PrintHelper.PrintHint('argparse')
print('这是一个python提供的针对命令行编程的模块')
print('作者认为命令行编程过于简单,并不需要此类模块')
print('当然,这取决于你是否要利用它')

